import Joi from "joi";
const timeString = Joi.string().pattern(/^\d{2}:\d{2}(:\d{2})?$/);
const isoDateOnly = Joi.string().pattern(/^\d{4}-\d{2}-\d{2}$/);

const registerSchema = Joi.object({
  username: Joi.string().min(3).max(64).required(),
  password: Joi.string().min(8).max(128).required(),
  role: Joi.string().valid("admin", "staff").default("staff"),
  is_login: Joi.boolean().default(false),
  untime_approved: Joi.boolean().default(false),
  untime: Joi.object({
    startTime: Joi.date().optional(),
    active: Joi.boolean().default(false),
    durationMinutes: Joi.number().integer().min(0).default(0),
  }).optional(),
  created_by: Joi.string().uuid().optional(),
});

const loginSchema = Joi.object({
  username: Joi.string().required(),
  password: Joi.string().required(),
});

const roleUpdateSchema = Joi.object({
  userId: Joi.string().uuid().required(),
  role: Joi.string().valid("admin", "staff").required(),
});

const passwordUpdateSchema = Joi.object({
  currentPassword: Joi.string().optional(),
  newPassword: Joi.string().min(8).max(128).required(),
});

const staffCreateSchema = Joi.object({
  userId: Joi.string().uuid().required(),
  firstName: Joi.string().max(100).required(),
  lastName: Joi.string().max(100).required(),
  email: Joi.string().email().required(),
  contactNo: Joi.string().max(30).required(),
  emergencyContactNo: Joi.string().max(30).required(),
  shiftStart: timeString.required(),
  shiftEnd: timeString.required(),
  birthday: Joi.date().iso().optional(),
  joiningDate: Joi.date().iso().optional(),
  // leaveTaken: Joi.number().precision(2).min(0).optional(),
  totalLeaves: Joi.number().precision(2).min(0).optional(),
  position: Joi.string().max(120).optional(),
  managerId: Joi.string().uuid().allow(null).optional(),
  jobFamily: Joi.string().max(120).optional(),

  // employeeId is intentionally NOT accepted on create (generated by DB)
});

const staffUpdateSchema = Joi.object({
  firstName: Joi.string().max(100).optional(),
  lastName: Joi.string().max(100).optional(),
  email: Joi.string().email().optional(),
  contactNo: Joi.string().max(30).optional(),
  emergencyContactNo: Joi.string().max(30).optional(),
  shiftStart: timeString.optional(),
  shiftEnd: timeString.optional(),
  birthday: Joi.date().iso().optional().allow(null),
  joiningDate: Joi.date().iso().optional().allow(null),
  leaveTaken: Joi.number().precision(2).min(0).optional(),
  totalLeaves: Joi.number().precision(2).min(0).optional(),
  position: Joi.string().max(120).optional().allow(null, ''),
  managerId: Joi.string().uuid().optional().allow(null),
  jobFamily: Joi.string().max(120).optional().allow(null, ''),

  // employeeId is NOT allowed to be updated
}).min(1);

const shiftUpdateSchema = Joi.object({
  // "HH:mm" or "HH:mm:ss"
  start: Joi.string()
    .pattern(/^\d{2}:\d{2}(:\d{2})?$/)
    .required(),
  end: Joi.string()
    .pattern(/^\d{2}:\d{2}(:\d{2})?$/)
    .required(),

  // minutes (integers); optional in request â€” will keep existing if omitted
  marginTime: Joi.number().integer().min(0).max(24 * 60).optional(),
  alertTime: Joi.number().integer().min(0).max(24 * 60).optional(),
});

const adminRegisterStaffSchema = Joi.object({
  username: Joi.string().min(3).max(64).required(),
  password: Joi.string().min(8).max(128).required(),
  createdBy: Joi.string().uuid().optional(),
  firstName: Joi.string().max(100).required(),
  lastName: Joi.string().max(100).required(),
  email: Joi.string().email().required(),
  contactNo: Joi.string().max(30).required(),
  emergencyContactNo: Joi.string().max(30).required(),
  shiftStart: timeString.required(),
  shiftEnd: timeString.required(),

  birthday: Joi.date().iso().optional(),
  joiningDate: Joi.date().iso().optional(),
  // leaveTaken: Joi.number().precision(2).min(0).optional(),
  totalLeaves: Joi.number().precision(2).min(0).optional(),
  position: Joi.string().max(120).optional(),
  managerId: Joi.string().uuid().allow(null).optional(),
  jobFamily: Joi.string().max(120).optional(),
});

const untimeStartSchema = Joi.object({
  userId: Joi.string().uuid().required(),
  durationMinutes: Joi.number().integer().min(1).optional(),
});

const untimeDurationSchema = Joi.object({
  userId: Joi.string().uuid().required(),
  durationMinutes: Joi.number().integer().min(1).required(),
});

const leaveCreateSchema = Joi.object({
  staffId: Joi.string().uuid().required(),
  startDate: isoDateOnly.required(),
  endDate: isoDateOnly.required(),
  reason: Joi.string().trim().min(3).max(2000).required(),
}).custom((v, h) => {
  if (new Date(v.startDate) > new Date(v.endDate)) {
    return h.error("any.invalid", { message: "startDate must be <= endDate" });
  }
  return v;
});

const leaveUpdateSchema = Joi.object({
  startDate: isoDateOnly.optional(),
  endDate: isoDateOnly.optional(),
  reason: Joi.string().trim().min(3).max(2000).optional(),
})
  .min(1)
  .custom((v, h) => {
    if (
      v.startDate &&
      v.endDate &&
      new Date(v.startDate) > new Date(v.endDate)
    ) {
      return h.error("any.invalid", {
        message: "startDate must be <= endDate",
      });
    }
    return v;
  });

const attendanceMarkSchema = Joi.object({
  session: Joi.string().trim().min(1).required(),
  type: Joi.string()
    .valid("in", "out", "overtime_in", "overtime_out")
    .default("in"),
});

export {
  registerSchema,
  loginSchema,
  roleUpdateSchema,
  passwordUpdateSchema,
  staffCreateSchema,
  staffUpdateSchema,
  shiftUpdateSchema,
  adminRegisterStaffSchema,
  untimeStartSchema,
  untimeDurationSchema,
  leaveCreateSchema,
  leaveUpdateSchema,
  attendanceMarkSchema,
};
